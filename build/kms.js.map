{"version":3,"file":"kms.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/./src/internal/kms.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n  \n    // Validatiuon should be done by the type declaration \n    public set scheme(scheme: HTTPScheme) {\n      this._scheme = scheme\n  }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's KMS service\n */\nexport class KMSClient extends AWSClient {\n    method: HTTPMethod\n    commonHeaders: HTTPHeaders\n\n    signature: SignatureV4\n\n    /**\n     * Create a KMSClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'kms')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: awsConfig.region,\n            credentials: {\n                accessKeyId: awsConfig.accessKeyId,\n                secretAccessKey: awsConfig.secretAccessKey,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        // All interactions with the KMS service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Gets a list of all the KMS keys in the caller's AWS\n     * account and region.\n     *\n     * @returns an array of all the available keys\n     */\n    async listKeys(): Promise<Array<KMSKey>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    // For some reason, the base target is not kms...\n                    [AMZ_TARGET_HEADER]: `TrentService.ListKeys`,\n                },\n                body: JSON.stringify({}),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(KMSOperation.ListKeys, res)\n\n        const json: JSONArray = res.json('Keys') as JSONArray\n        return json.map((k) => KMSKey.fromJSON(k as JSONObject))\n    }\n\n    /**\n     * GenerateDataKey returns a unique symmetric data key for use outside of AWS KMS.\n     *\n     * This operation returns a plaintext copy of the data key and a copy that is encrypted under a symmetric encryption KMS key that you specify.\n     * The bytes in the plaintext key are random; they are not related to the caller or the KMS key.\n     * You can use the plaintext key to encrypt your data outside of AWS KMS and store the encrypted data key with the encrypted data.\n     *\n     * To generate a data key, specify the symmetric encryption KMS key that will be used to encrypt the data key.\n     * You cannot use an asymmetric KMS key to encrypt data keys.\n     *\n     * Used to generate data key with the KMS key defined\n     * @param {string} id - Specifies the symmetric encryption KMS key that encrypts the data key. Use its key ID, key ARN, alias name, or alias ARN.\n     * @param {KMKeySize} size - Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). Default is 32, and generates a 256-bit data key.\n     * @throws {KMSServiceError}\n     * @throws {InvalidSignatureError}\n     * @returns {KMSDataKey} - The generated data key.\n     */\n    async generateDataKey(\n        id: string,\n        size: KMSKeySize = KMSKeySize.Size256\n    ): Promise<KMSDataKey | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    // For some reason, the base target is not kms...\n                    [AMZ_TARGET_HEADER]: `TrentService.GenerateDataKey`,\n                },\n                body: JSON.stringify({ KeyId: id, NumberOfBytes: size }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(KMSOperation.GenerateDataKey, res)\n\n        return KMSDataKey.fromJSON(res.json() as JSONObject)\n    }\n\n    _handle_error(operation: KMSOperation, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new KMSServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new KMSServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n/**\n * Class representing a KMS key\n */\nexport class KMSKey {\n    /**\n     * ARN of the key\n     */\n    keyArn: string\n\n    /**\n     * Unique identifier of the key\n     */\n    keyId: string\n\n    constructor(keyArn: string, KeyId: string) {\n        this.keyArn = keyArn\n        this.keyId = KeyId\n    }\n\n    static fromJSON(json: JSONObject) {\n        return new KMSKey(json.KeyArn as string, json.KeyId as string)\n    }\n}\n\n/**\n * Class representing a data key\n */\nexport class KMSDataKey {\n    /**\n     * The Amazon Resource Name (key ARN) of the KMS key that encrypted the data key.\n     */\n    id: string\n\n    /**\n     * The (base64-encoded) encrypted copy of the data key.\n     */\n    ciphertextBlob: string\n\n    /**\n     * The plaintext data key.\n     * Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.\n     */\n    plaintext: string\n\n    constructor(CiphertextBlob: string, KeyId: string, Plaintext: string) {\n        this.ciphertextBlob = CiphertextBlob\n        this.id = KeyId\n        this.plaintext = Plaintext\n    }\n\n    static fromJSON(json: JSONObject) {\n        return new KMSDataKey(\n            json.CiphertextBlob as string,\n            json.KeyId as string,\n            json.Plaintext as string\n        )\n    }\n}\n\nexport class KMSServiceError extends AWSError {\n    operation: KMSOperation\n\n    /**\n     * Constructs a KMSServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: KMSOperation) {\n        super(message, code)\n        this.name = 'KMSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  KMSOperation defines all currently implemented KMS Service operations.\n */\nenum KMSOperation {\n    GenerateDataKey = 'GenerateDataKey',\n    ListKeys = 'ListKeys',\n}\n\n/**\n *  KMSKeyLength describes possible key lenght values for KMS API data key operations.\n */\nenum KMSKeySize {\n    Size256 = 32,\n    Size512 = 64,\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","undefined","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","options","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AWSClient","awsConfig","serviceName","_endpoint","scheme","_scheme","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","target","source","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","p","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","KMSClient","_AWSClient","_generateDataKey","_listKeys","commonHeaders","_callee","signedRequest","json","_context","sign","http","_handle_error","KMSOperation","ListKeys","k","KMSKey","fromJSON","_callee2","id","size","_args2","_context2","KMSKeySize","Size256","KeyId","NumberOfBytes","GenerateDataKey","KMSDataKey","_x","operation","response","errorCode","error_code","errorMessage","Message","__type","KMSServiceError","keyArn","keyId","KeyArn","CiphertextBlob","Plaintext","ciphertextBlob","plaintext","_super2","_this2"],"sourceRoot":""}
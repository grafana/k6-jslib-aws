{"version":3,"file":"sqs.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/sqs.ts"],"sourcesContent":["import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n  \n    // Validatiuon should be done by the type declaration \n    public set scheme(scheme: HTTPScheme) {\n      this._scheme = scheme\n  }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","module.exports = require(\"k6/crypto\");","module.exports = require(\"k6/html\");","module.exports = require(\"k6/http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { SignatureV4, InvalidSignatureError } from './signature'\nimport { HTTPHeaders, SignedHTTPRequest } from './http'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\nimport { toFormUrlEncoded } from './utils'\nimport { AWSError } from './error'\n\nconst API_VERSION = '2012-11-05'\n\nexport class SQSClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'sqs')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: true,\n        })\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n    }\n\n    /**\n     * Delivers a message to the specified queue.\n     *\n     * @param {string} queueUrl - The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.\n     * @param {string} messageBody - The message to send. The minimum size is one character. The maximum size is 256 KB.\n     * @param {Object} options - Options for the request\n     * @param {string} [options.messageDeduplicationId] - The message deduplication id.\n     * @param {string} [options.messageGroupId] - The message group ID for FIFO queues\n     * @returns {Message} - The message that was sent.\n     */\n    async sendMessage(\n        queueUrl: string,\n        messageBody: string,\n        options: { messageDeduplicationId?: string; messageGroupId?: string } = {}\n    ): Promise<Message> {\n        const method = 'POST'\n\n        let body: any = {\n            Action: 'SendMessage',\n            Version: API_VERSION,\n            QueueUrl: queueUrl,\n            MessageBody: messageBody,\n        }\n\n        if (typeof options.messageDeduplicationId !== 'undefined') {\n            body = { ...body, MessageDeduplicationId: options.messageDeduplicationId }\n        }\n\n        if (typeof options.messageGroupId !== 'undefined') {\n            body = { ...body, MessageGroupId: options.messageGroupId }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('SendMessage', res)\n\n        const parsed = res.html('SendMessageResponse > SendMessageResult')\n        return new Message(parsed.find('MessageId').text(), parsed.find('MD5OfMessageBody').text())\n    }\n\n    /**\n     * Returns a list of your queues in the current region.\n     *\n     * @param {ListQueuesRequestParameters} [parameters={}] request parameters\n     * @param {number} [ListQueuesRequestParameters.maxResults] Maximum number of results to include in the response. Value range is 1 to 1000. You must set maxResults to receive a value for nextToken in the response.\n     * @param {string} [ListQueuesRequestParameters.nextToken] Pagination token to request the next set of results.\n     * @param {string} [ListQueuesRequestParameters.queueNamePrefix] A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * @returns {Object}\n     * @returns {string[]} Object.queueUrls - A list of queue URLs, up to 1000 entries.\n     * @returns {string} [Object.nextToken] - In the future, you can use NextToken to request the next set of results.\n     */\n    async listQueues(parameters: ListQueuesRequestParameters = {}): Promise<ListQueuesResponse> {\n        const method = 'POST'\n\n        let body: any = {\n            Action: 'ListQueues',\n            Version: API_VERSION,\n        }\n\n        if (typeof parameters?.maxResults !== 'undefined') {\n            body = { ...body, MaxResults: parameters.maxResults }\n        }\n\n        if (typeof parameters?.nextToken !== 'undefined') {\n            body = { ...body, NextToken: parameters.nextToken }\n        }\n\n        if (typeof parameters?.queueNamePrefix !== 'undefined') {\n            body = { ...body, QueueNamePrefix: parameters.queueNamePrefix }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    Host: this.endpoint.host,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('ListQueues', res)\n\n        let parsed = res.html()\n        return {\n            urls: parsed\n                .find('QueueUrl')\n                .toArray()\n                .map((e) => e.text()),\n            nextToken: parsed.find('NextToken').text() || undefined,\n        }\n    }\n\n    private _handleError(\n        operation: SQSOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new SQSServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/**\n * An Amazon SQS message.\n */\nexport class Message {\n    /**\n     * A unique identifier for the message.\n     * A MessageIdis considered unique across all AWS accounts for an extended period of time.\n     */\n    id: string\n\n    /**\n     * An MD5 digest of the non-URL-encoded message body string.\n     */\n    bodyMD5: string\n\n    /**\n     * Instantiates a new Message object.\n     *\n     * @param id\n     * @param md5Ofbody\n     */\n    constructor(id: string, bodyMD5: string) {\n        this.id = id\n        this.bodyMD5 = bodyMD5\n    }\n}\n\n/**\n * SQSServiceError indicates an error occurred while interacting with the SQS API.\n */\nexport class SQSServiceError extends AWSError {\n    operation: SQSOperation\n\n    constructor(message: string, code: string, operation: SQSOperation) {\n        super(message, code)\n        this.name = 'SQSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * SQSOperation describes possible SQS operations.\n */\ntype SQSOperation = 'ListQueues' | 'SendMessage'\n\nexport interface SendMessageOptions {\n    /*\n     * The message deduplication ID for FIFO queues\n     */\n    messageDeduplicationId?: string\n\n    /*\n     * The message group ID for FIFO queues\n     */\n    messageGroupId?: string\n}\n\nexport interface ListQueuesRequestParameters {\n    /**\n     * Maximum number of results to include in the response. Value range is 1 to 1000.\n     */\n    maxResults?: number\n    /**\n     * Pagination token to request the next set of results.\n     */\n    nextToken?: string\n    /**\n     * A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * Queue URLs and names are case-sensitive.\n     */\n    queueNamePrefix?: string\n}\n\nexport interface ListQueuesResponse {\n    /**\n     * A list of queue URLs, up to 1,000 entries, or the value of MaxResults you sent in the request.\n     */\n    urls: string[]\n    /**\n     * Pagination token to include in the next request.\n     */\n    nextToken?: string\n}\n"],"names":["AWSClient","awsConfig","serviceName","_classCallCheck","_defineProperty","this","undefined","endpoint","_endpoint","key","get","Endpoint","concat","region","set","scheme","_scheme","AWSConfig","options","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","value","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","call","_wrapNativeSuper","Error","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","MAX_PRESIGNED_TTL","EMPTY_SHA256","UNSIGNED_PAYLOAD","completeUrl","startsWith","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","_protocol","slice","_hostname","_port","parseInt","href","_value$split2","hostname","port","protocol","host","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","hasHeader","soughtHeader","headers","_i","_Object$keys","Object","keys","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","isArrayBuffer","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","prototype","toFormUrlEncoded","form","params","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","target","source","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","p","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","API_VERSION","SQSClient","_AWSClient","_listQueues","_sendMessage","commonHeaders","_callee","queueUrl","messageBody","signedRequest","parsed","_args","_context","Action","Version","QueueUrl","MessageBody","messageDeduplicationId","MessageDeduplicationId","messageGroupId","MessageGroupId","sign","http","_handleError","html","Message","_x","_x2","_callee2","parameters","_args2","_context2","maxResults","MaxResults","nextToken","NextToken","queueNamePrefix","QueueNamePrefix","Host","urls","toArray","operation","response","errorCode","error_code","awsError","parseXML","SQSServiceError","id","bodyMD5","_super2","_this2"],"sourceRoot":""}
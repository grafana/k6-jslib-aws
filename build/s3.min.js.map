{"version":3,"file":"s3.min.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/s3.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    code: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto, { hmac, sha256 } from 'k6/crypto'\nimport { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\n\n/**\n * Includes AWS v4 signing information to the provided HTTP headers object.\n *\n * This function will compute the `Authorization` header signature for the\n * provided request components, and add it to `header`. It will do so by following\n * the procedure detailled AWS' API docs: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n *\n * The resulting `Authorization` header value is computed for the provided\n * headers object. Thus, any modification of the headers past a call to `signHeaders`\n * would effectively invalidate their signature, and the function should be\n * called again to recompute it.\n *\n * @param  {object} headers - HTTP headers request to sign.\n * @param  {number} requestTimestamp - Timestamp of the request\n * @param  {string} method - HTTP method used\n * @param  {string} path - HTTP request URL's path\n * @param  {string} queryString - HTTP request URL's querystring\n * @param  {string | ArrayBuffer} body - HTTP request's payload\n * @param  {AWSConfig} - AWS configuration\n * @param  {string} service - AWS service name\n * @param  {URIEncodingConfig} - URI encoding configuration\n */\nexport function signHeaders(\n    headers: HTTPHeaders,\n    requestTimestamp: number,\n    method: HTTPMethod,\n    path: string,\n    queryString: string,\n    body: string | ArrayBuffer,\n    awsConfig: AWSConfig,\n    service: string,\n    URIencodingConfig: URIEncodingConfig\n): HTTPHeaders {\n    // If the config contains a session token, we should add it to the headers\n    // as a `X-Amz-Security-Token` header, cf: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    if (awsConfig.sessionToken) {\n        headers['X-Amz-Security-Token'] = awsConfig.sessionToken\n    }\n\n    const derivedSigningKey = deriveSigningKey(\n        awsConfig.secretAccessKey,\n        requestTimestamp,\n        awsConfig.region,\n        service\n    )\n\n    const canonicalRequest = createCanonicalRequest(\n        method,\n        path,\n        queryString,\n        headers,\n        body,\n        URIencodingConfig\n    )\n\n    const stringToSign = createStringToSign(\n        requestTimestamp,\n        awsConfig.region,\n        service,\n        sha256(canonicalRequest, 'hex')\n    )\n\n    const credentialScope = createCredentialScope(requestTimestamp, awsConfig.region, service)\n    const signedHeaders = createSignedHeaders(headers)\n    const signature = calculateSignature(derivedSigningKey, stringToSign)\n    const authorizationHeader = `${HashingAlgorithm} Credential=${awsConfig.accessKeyID}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${signature}`\n\n    headers['Authorization'] = authorizationHeader\n\n    return headers\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\n/**\n * Calculte the signature for AWS signature version 4\n *\n * @param  {string} derivedSigningKey - dervied signing key as computed by `deriveSigningKey`\n * @param  {string} stringToSign - String to sign as computed by `createStringToSign`\n * @return {string}\n */\nexport function calculateSignature(derivedSigningKey: ArrayBuffer, stringToSign: string): string {\n    return hmac('sha256', derivedSigningKey, stringToSign, 'hex')\n}\n/**\n * Derives the signing key for authenticating requests signed with\n * the Signature version 4 authentication protocol.\n *\n * deriveSigningKey produces a signing key by creating a series of\n * hash-based message authentication codes (HMACs) represented in\n * a binary format.\n *\n * The derived signing key is specific to the date it's made at, as well as\n * the service and region it targets.\n *\n * @param  {string} secretAccessKey - the AWS secret access key to derive the signing key for\n * @param  {number} time - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function deriveSigningKey(\n    secretAccessKey: string,\n    time: number,\n    region: string,\n    service: string\n): ArrayBuffer {\n    const kSecret = secretAccessKey\n    const date = toDate(time)\n\n    // FIXME: hmac takes ArrayBuffer as input, but returns bytes (number[]).\n    // How does one convert from one to the other?\n    const kDate: any = hmac('sha256', 'AWS4' + kSecret, date, 'binary')\n    const kRegion: any = hmac('sha256', kDate, region, 'binary')\n    const kService: any = hmac('sha256', kRegion, service, 'binary')\n    const kSigning: any = hmac('sha256', kService, 'aws4_request', 'binary')\n\n    return kSigning\n}\n\n// Hashing Algorithm to use in the signature process\nexport const HashingAlgorithm = 'AWS4-HMAC-SHA256'\n\n/**\n * Certain services, such as S3, allow for unsigned payloads. If\n *  producing a signed canonical request for such service, pass\n *  the `UnsignedPayload` constant value as the payload parameter.\n */\nexport const UnsignedPayload = 'UNSIGNED-PAYLOAD'\n\n/**\n * Create the \"string to sign\" part of the signature Version 4 protocol.\n *\n * The \"string to sign\" includes meta information about your request and\n * about the canonical request that you created with `createCanonicalRequest`.\n * It is used hand in hand with the signing key to create the request signature.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @param  {string} hashedCanonicalRequest - canonical request as produced by calling the createCanonicalRequest function,\n *     hashed using the SHA256 algorithm (encoded in hexadecimal format).\n * @return {string}\n */\nexport function createStringToSign(\n    requestTimestamp: number,\n    region: string,\n    service: string,\n    hashedCanonicalRequest: string\n): string {\n    // the request date specified in ISO8601 format: YYYYMMDD'T'HHMMSS'Z'\n    const requestDateTime = toTime(requestTimestamp)\n\n    // The credential scope value, consisting of the date in YYYYMMDD format,\n    // the targeted region, the targeted service, and a termination string.\n    // Note that the region and service MUST be UTF-8 encoded.\n    const credentialScope = createCredentialScope(requestTimestamp, region, service)\n\n    const stringToSign = [\n        // Algorithm\n        HashingAlgorithm,\n\n        // RequestDateTime\n        requestDateTime,\n\n        // CredentialScope\n        credentialScope,\n\n        // HashedCanonicalRequest\n        hashedCanonicalRequest,\n    ].join('\\n')\n\n    return stringToSign\n}\n\n/**\n *\n * Helper function creating a credential scope string to use in the signature\n * version 4 process. A credential scope consists of the date of the request\n * in YYYYMMDD format, the targeted region, the targeted service, and a\n * termination string.\n *\n * Note that the region and service MUST be UTF-8 encoded.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function createCredentialScope(\n    requestTimestamp: number,\n    region: string,\n    service: string\n): string {\n    return [toDate(requestTimestamp), region, service, 'aws4_request'].join('/')\n}\n\n/**\n *  Create a string that includes information from your request\n * in a AWS signature v4 standardized (canonical) format.\n *\n * @param  {string} method - the HTTP request method\n * @param  {string} uri - URI-encoded version of the absolute path component of the URI\n * @param  {string} query - request's query string\n * @param  {Object} headers - all the HTTP headers that you wish to include with the signed request\n * @param  {string | ArrayBuffer} payload -  payload to include as the body of the request\n * @param  {URIEncodingConfig} URIencodingConfig- URI encoding configuration\n * @return {string}\n */\nexport function createCanonicalRequest(\n    method: HTTPMethod,\n    uri: string,\n    query: string,\n    headers: HTTPHeaders,\n    payload: string | ArrayBuffer,\n    URIencodingConfig: URIEncodingConfig\n): string {\n    const httpRequestMethod = method.toUpperCase()\n    const canonicalURI = createCanonicalURI(uri, URIencodingConfig)\n    const canonicalQueryString = createCanonicalQueryString(query)\n    const canonicalHeaders = createCanonicalHeaders(headers)\n    const signedHeaders = createSignedHeaders(headers)\n    const requestPayload = createCanonicalPayload(payload)\n\n    const canonicalRequest = [\n        httpRequestMethod,\n        canonicalURI,\n        canonicalQueryString,\n        canonicalHeaders,\n        signedHeaders,\n        requestPayload,\n    ].join('\\n')\n\n    return canonicalRequest\n}\n\n/**\n *  Creates the (canonical) URI-encoded version of the\n *  absolute path component of the URI: everything in the URI\n *  from the HTTP host to the question mark character (\"?\")\n *  that begins the query string parameters (if any).\n *\n * @param  {string} uri - URI to canonize\n * @param  {URIEncodingConfig} - URI encoding configuration\n * @return {string} - canonical URL\n */\nexport function createCanonicalURI(uri: string, URIencodingConfig: URIEncodingConfig): string {\n    if (uri == '/') {\n        return uri\n    }\n\n    let canonicalURI = uri\n    if (uri[uri.length - 1] == '/' && canonicalURI[canonicalURI.length - 1] != '/') {\n        canonicalURI += '/'\n    }\n\n    canonicalURI = URIEncode(canonicalURI, URIencodingConfig.path)\n\n    return URIencodingConfig.double ? URIEncode(canonicalURI, URIencodingConfig.path) : canonicalURI\n}\n\n/**\n * Creates the canonical form of the request's query\n * string. If the request does not include a query string,\n * provide an empty string.\n *\n * @param  {String | Object} qs - query string to canonize\n * @return {string}\n */\nexport function createCanonicalQueryString(qs: string): string {\n    if (qs === '') {\n        return ''\n    }\n\n    // const intermediary: { [key: string]: string } = parseQueryString(qs)\n\n    // return Object.keys(intermediary)\n    //     .sort()\n    //     .map((key: string) => {\n    //         // const values: string[] = Array.isArray(intermediary[key])\n    //         //     ? intermediary[key]\n    //         //     : [intermediary[key]]\n    //         const values = intermediary[key]\n\n    //         return values\n    //             .sort()\n    //             .map((val: string) => encodeURIComponent(key) + '=' + encodeURIComponent(val))\n    //             .join('&')\n    //     })\n    //     .join('&')\n\n    return parseQueryString(qs)\n        .map(([key, value]: [string, string]): string => {\n            let uriComponent = encodeURIComponent(key) + '='\n            if (value !== 'undefined') {\n                uriComponent += encodeURIComponent(value)\n            }\n\n            return uriComponent\n        })\n        .join('&')\n}\n\n/**\n * Create the canonical form of the request's headers.\n * Canonical headers consist of all the HTTP headers you\n * are including with the signed request.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the headers should at least\n * contain the `host` header.\n *   * for HTTP/2, the `:authority` header must be used instead\n * of `host`.\n *\n * @param  {Object} headers\n * @return {string}\n */\nexport function createCanonicalHeaders(headers: HTTPHeaders) {\n    if (headers.constructor !== Object || Object.entries(headers).length === 0) {\n        return ''\n    }\n\n    const canonicalHeaders = Object.entries(headers)\n        .map(([name, values]) => {\n            const canonicalName = name.toLowerCase().trim()\n            const normalizedValues = Array.isArray(values) ? values : [values]\n\n            // Note that we do not need to sort values\n            const canonicalValues = normalizedValues\n                .map((v) => {\n                    // convert sequential spaces to a single space\n                    return v.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '')\n                })\n                .join(',') // standard for multiple values in a HTTP header\n\n            return canonicalName + ':' + canonicalValues + '\\n'\n        })\n        .sort()\n        .join('')\n\n    return canonicalHeaders\n}\n\n/**\n * Create the canonical request's signed headers.\n *\n * The signed headers part of the request contains the\n * list of headers included in the request's signing process.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the `host` header must be included.\n *   * for HTTP/2 requests, the `:authority` header must be included instead\n *   of host.\n *   * if used, the `x-amz-date` header must be included.\n *\n * @param  {Object} headers\n * @return {string}\n * @throws {TypeError} - on headers not being an Object, or being empty.\n */\nexport function createSignedHeaders(headers: { [key: string]: string }) {\n    if (headers.constructor !== Object) {\n        throw new TypeError('headers should be an object')\n    }\n\n    if (Object.entries(headers).length === 0) {\n        throw 'headers should at least contain either the Host (HTTP 1.1) or :authority (HTTP 2) parameter'\n    }\n\n    // To create the signed headers list, convert\n    // all header names to lowercase, sort them by\n    // character code, and use a semicolon to separate\n    // the header names.\n    const result = Object.keys(headers)\n        .map((name) => name.toLowerCase().trim())\n        .sort()\n        .join(';')\n\n    return result\n}\n\n/**\n * Create the canonical form of the request's payload.\n *\n * The canonical payload consists in a lowercased, hex encoded,\n * SHA256 hash of the requests body/payload.\n *\n * Certain services, such as S3, allow for unsigned payload. If\n * producing a signed canonical request for such service, pass\n * the `UnsignedPayload` constant value as the payload parameter.\n *\n * @param  {String | ArrayBuffer} payload\n * @return {string}\n */\nexport function createCanonicalPayload(payload: string | ArrayBuffer) {\n    if (payload === UnsignedPayload) {\n        return payload\n    }\n\n    // Note that if the paylaod is null, we convert it\n    // to an empty string.\n    // TODO: Should switching to empty string if null impact headers?\n    return crypto.sha256(payload || '', 'hex').toLowerCase()\n}\n\n/**\n * URIEncodes encodes every bytes of a URI to be URL-safe.\n *\n * This implementation is specific to AWS; who intended to make it as\n * close as possible to the underlying RFC 3946. It:\n *   * URI encode every byte except the unreserved characters: 'A'-'Z', 'a'-'z', '0'-'9',\n *     '-', '.', '_', and '~'.\n *   * considers the space character as a reserved character and must URI encodes\n *     encodes it as \"%20\" (and not as \"+\").\n *   * URI encodes every byte by prefixing with '%' the two-digit hexadecimal value of the byte.\n *   * If the `path` argument is set, forward slashes are not encoded, to fit with\n *     S3 requirements.\n *\n * N.B: this implementation differs with ES6' mainly in that it does\n * encode the \"'\" character.\n *\n * Based on AWS implementation: https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/util/SdkHttpUtils.java#L66\n * Encoding specs: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n *\n * @param {string} uri - uri to encode\n * @param {boolean} path - slash characters should be encoded everywhere,\n *     but in paths, set to false when encoding a path\n * @return {string} the URI encoded result\n */\nexport function URIEncode(uri: string, path: boolean): string {\n    if (uri == '') {\n        return uri\n    }\n\n    return uri\n        .split('') // to be able to map over a string, because... javascript...\n        .map((letter: string) => {\n            if (isAlpha(letter) || isNumeric(letter) || '-._~'.includes(letter)) {\n                return letter\n            }\n\n            // Space should be explicitly encoded to as %20.\n            if (letter == ' ') {\n                return '%20'\n            }\n\n            // If the URI is a path, the forward slash shouldn't\n            // be encoded.\n            if (letter == '/' && path) {\n                return '/'\n            }\n\n            return '%' + letter.charCodeAt(0).toString(16).toUpperCase()\n        })\n        .join('')\n}\n\n/**\n * Class holding URI encoding configuration\n */\nexport class URIEncodingConfig {\n    double: boolean\n    path: boolean\n\n    /**\n     *\n     * @param {boolean} double - should the URI be double encoded?\n     * @param {boolean} path - is the URI a path? If so, its forward\n     *     slashes won't be URIencoded.\n     */\n    constructor(double: boolean, path: boolean) {\n        this.double = double\n        this.path = path\n    }\n}\n\n/**\n * Compute the request time value as specified by the ISO8601\n * format: YYYYMMDD'T'HHMMSS'Z'\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toTime(timestamp: number): string {\n    return new Date(timestamp).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n}\n/**\n * Computethe request date value in the format: YYYMMDD\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toDate(timestamp: number): string {\n    return toTime(timestamp).substring(0, 8)\n}\n\n/**\n * Parse a HTTP request URL's querystring into an object\n * containing its `key=value` pairs.\n *\n * @param  {string} qs\n * @return {object}\n */\nexport function parseQueryString(qs: string): Array<[string, string]> {\n    if (qs.length === 0) {\n        return []\n    }\n\n    return qs\n        .split('&')\n        .filter((e) => e)\n        .map((v: string): [string, string] => {\n            const parts = v.split('=', 2) as [string, string]\n            const key = decodeURIComponent(parts[0])\n            let value = decodeURIComponent(parts[1])\n            if (value === 'undefined') {\n                value = ''\n            }\n            return [key, value]\n        })\n        .sort((a: [string, string], b: [string, string]) => {\n            return a[0].localeCompare(b[0])\n        })\n}\n\nfunction isAlpha(c: string): boolean {\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')\n}\n\nfunction isNumeric(c: string): boolean {\n    return c >= '0' && c <= '9'\n}\n\n// FIXME: finish implementation when needed\n// See the following for more details:\n//   * https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n//   * https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n// export function signQueryString(\n// queryString,\n// requestTimestamp,\n// accessKeyID,\n// secretAccessKey,\n// region,\n// service,\n// ttl, // in seconds\n// headers,\n// doubleURIEncoding = true\n// ) {\n// const credential = [accessKeyID, toDate(requestTimestamp), region, service].join('/')\n//\n// const canonicalRequest = createCanonicalRequest(\n// method,\n// path,\n// queryString,\n// headers,\n// body,\n// doubleURIEncoding\n// )\n//\n// const derivedSigningKey = deriveSigningKey(secretAccessKey, requestTimestamp, region, service)\n//\n// const stringToSign = createStringToSign(\n// requestTimestamp,\n// region,\n// service,\n// sha256(canonicalRequest, 'hex')\n// )\n//\n// const signedHeaders = createSignedHeaders(headers)\n// const signature = calculateSignature(derivedSigningKey, stringToSign)\n//\n// return [\n// `X-Amz-Algorithm=${HashingAlgorithm}`,\n// `X-Amz-Credential=${crediental}`,\n// `X-Amz-Date=${toTime(requestTimestamp)}`,\n// `X-Amz-Expires=${ttl}`,\n// `X-Amz-SignedHeaders=${signedHeaders}`,\n// `X-Amz-Signature=${signature}`,\n//`X-Amz-Security-Token=`,  // TODO: optional\n// ].join('&')\n// }\n","import { HTTPScheme } from './http'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyID: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme} ['https']\n     */\n    scheme: HTTPScheme = 'https'\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint: string = 'amazonaws.com'\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (options.region === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS region; reason: should be a non empty string'\n            )\n        }\n\n        if (options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS access key ID; reason: should be a non empty string'\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS secret access key; reason: should be a non empty string'\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyID = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.scheme !== undefined) {\n            this.scheme = options.scheme\n        }\n\n        if (options.endpoint !== undefined) {\n            this.endpoint = options.endpoint\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { bytes } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\nimport { parseHTML } from 'k6/html'\nimport { sha256 } from 'k6/crypto'\n\nimport { InvalidSignatureError, URIEncodingConfig } from './signature'\nimport { AWSClient, AWSRequest } from './client'\nimport { AWSError } from './error'\nimport { AWSConfig } from './config'\n\n/** Class allowing to interact with Amazon AWS's S3 service */\nexport class S3Client extends AWSClient {\n    /**\n     * Create a S3Client\n     *\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        const URIencodingConfig = new URIEncodingConfig(false, true)\n        super(awsConfig, 's3', URIencodingConfig)\n    }\n\n    /**\n     * Returns a list of all buckets owned by the authenticated sender of the request.\n     * To use this operation, you must have the s3:ListAllMyBuckets permission.\n     *\n     * @return  {Array.<S3Bucket>} buckets - An array of objects describing S3 buckets\n     *     with the following fields: name, and creationDate.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listBuckets(): Array<S3Bucket> {\n        // Prepare request\n        const method = 'GET'\n        const body = ''\n        const signedRequest: AWSRequest = super.buildRequest(method, this.host, '/', '', body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListBuckets', res)\n\n        let buckets: Array<S3Bucket> = []\n\n        const doc = parseHTML(res.body as string)\n\n        doc.find('Buckets')\n            .children()\n            .each((_, bucketDefinition) => {\n                let bucket = {}\n\n                bucketDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'name':\n                            Object.assign(bucket, { name: child.textContent() })\n                            break\n                        case 'creationdate':\n                            Object.assign(bucket, {\n                                creationDate: Date.parse(child.textContent()),\n                            })\n                    }\n                })\n\n                buckets.push(bucket as S3Bucket)\n            })\n\n        return buckets\n    }\n\n    /**\n     * Returns some or all (up to 1,000) of the objects in a bucket.\n     *\n     * @param  {string} bucketName - Bucket name to list.\n     * @param  {string?} prefix='' - Limits the response to keys that begin with the specified prefix.\n     * @return {Array.<S3Object>} - returns an array of objects describing S3 objects\n     *     with the following fields: key, lastModified, etag, size and storageClass.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listObjects(bucketName: string, prefix?: string): Array<S3Object> {\n        // Prepare request\n        const method = 'GET'\n        const host = `${bucketName}.${this.host}`\n        const body = ''\n        const querystring = `list-type=2&prefix=${prefix || ''}`\n        const signedRequest: AWSRequest = super.buildRequest(method, host, '/', querystring, body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n            Prefix: prefix ?? '',\n        })\n\n        const res = http.request(method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListObjectsV2', res)\n\n        let objects: Array<S3Object> = []\n\n        // Extract the objects definition from\n        // the XML response\n        parseHTML(res.body as string)\n            .find('Contents')\n            .each((_, objectDefinition) => {\n                let obj = {}\n\n                objectDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'key':\n                            Object.assign(obj, { key: child.textContent() })\n                            break\n                        case 'lastmodified':\n                            Object.assign(obj, { lastModified: Date.parse(child.textContent()) })\n                            break\n                        case 'etag':\n                            Object.assign(obj, { etag: child.textContent() })\n                            break\n                        case 'size':\n                            Object.assign(obj, { size: parseInt(child.textContent()) })\n                            break\n                        case 'storageclass':\n                            Object.assign(obj, { storageClass: child.textContent() })\n                    }\n                })\n\n                objects.push(obj as S3Object)\n            })\n\n        return objects\n    }\n    /**\n     * Retrieves an Object from Amazon S3.\n     *\n     * To use getObject, you must have `READ` access to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to get.\n     * @return {S3Object} - returns the content of the fetched S3 Object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    getObject(bucketName: string, objectKey: string): S3Object {\n        // Prepare request\n        const method = 'GET'\n        const host = `${bucketName}.${this.host}`\n        const path = `/${objectKey}`\n        const body = ''\n        const signedRequest: AWSRequest = super.buildRequest(method, host, path, '', body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('GetObject', res)\n\n        return new S3Object(\n            objectKey,\n            Date.parse(res.headers['Last-Modified']),\n            res.headers['ETag'],\n            parseInt(res.headers['Content-Length']),\n\n            // The X-Amz-Storage-Class header is only set if the storage class is\n            // not the default 'STANDARD' one.\n            (res.headers['X-Amz-Storage-Class'] ?? 'STANDARD') as StorageClass,\n\n            res.body\n        )\n    }\n    /**\n     * Adds an object to a bucket.\n     *\n     * You must have WRITE permissions on a bucket to add an object to it.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to put.\n     * @param  {string | ArrayBuffer} data - the content of the S3 Object to upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    putObject(bucketName: string, objectKey: string, data: string | ArrayBuffer) {\n        // Prepare request\n        const method = 'PUT'\n        const host = `${bucketName}.${this.host}`\n        const path = `/${objectKey}`\n        const queryString = ''\n        const body = data\n        const signedRequest: AWSRequest = super.buildRequest(\n            method,\n            host,\n            path,\n            queryString,\n            body,\n            {\n                'X-Amz-Content-SHA256': sha256(body, 'hex'),\n            }\n        )\n\n        const res = http.request(method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('PutObject', res)\n    }\n\n    /**\n     * Removes the null version (if there is one) of an object and inserts a delete marker,\n     * which becomes the latest version of the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    deleteObject(bucketName: string, objectKey: string): void {\n        // Prepare request\n        const method = 'DELETE'\n        const host = `${bucketName}.${this.host}`\n        const path = `/${objectKey}`\n        const queryString = ''\n        const body = ''\n        const signedRequest: AWSRequest = super.buildRequest(\n            method,\n            host,\n            path,\n            queryString,\n            body,\n            {\n                'X-Amz-Content-SHA256': sha256(body, 'hex'),\n            }\n        )\n\n        const res = http.request(method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('DeleteObject', res)\n    }\n\n    _handle_error(operation: S3Operation, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        // FIXME: should be errorCode === 1301 instead\n        // See: https://github.com/grafana/k6/issues/2474\n        // See: https://github.com/golang/go/issues/49281\n        if (errorMessage && errorMessage.startsWith('301')) {\n            throw new S3ServiceError('Resource not found', 'ResourceNotFound', operation)\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new S3ServiceError(awsError.message, awsError.code, operation)\n        }\n    }\n}\n\n/** Class representing a S3 Bucket */\nexport class S3Bucket {\n    name: string\n    creationDate: Date\n\n    /**\n     * Create an S3 Bucket\n     *\n     * @param  {string} name - S3 bucket's name\n     * @param  {Date} creationDate - S3 bucket's creation date\n     */\n    constructor(name: string, creationDate: Date) {\n        this.name = name\n        this.creationDate = creationDate\n    }\n}\n\n/** Class representing an S3 Object */\nexport class S3Object {\n    key: string\n    lastModified: number\n    etag: string\n    size: number\n    storageClass: StorageClass\n    data?: string | bytes | null\n\n    /**\n     * Create an S3 Object\n     *\n     * @param  {string} key - S3 object's key\n     * @param  {Date} lastModified - S3 object last modification date\n     * @param  {string} etag - S3 object's etag\n     * @param  {number} size - S3 object's size\n     * @param  {StorageClass} storageClass - S3 object's storage class\n     * @param  {string | bytes | null} data=null - S3 Object's data\n     */\n    constructor(\n        key: string,\n        lastModified: number,\n        etag: string,\n        size: number,\n        storageClass: StorageClass,\n        data?: string | bytes | null\n    ) {\n        this.key = key\n        this.lastModified = lastModified\n        this.etag = etag\n        this.size = size\n        this.storageClass = storageClass\n        this.data = data\n    }\n}\n\n/**\n * Error indicating a S3 operation failed\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class S3ServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a S3ServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'S3ServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * S3Operation describes possible values for S3 API operations,\n * as defined by AWS APIs.\n */\ntype S3Operation = 'ListBuckets' | 'ListObjectsV2' | 'GetObject' | 'PutObject' | 'DeleteObject'\n\n/**\n * Describes the class of storage used to store a S3 object.\n */\ntype StorageClass =\n    | 'STANDARD'\n    | 'REDUCED_REDUNDANCY'\n    | 'GLACIER'\n    | 'STANDARD_IA'\n    | 'INTELLIGENT_TIERING'\n    | 'DEEP_ARCHIVE'\n    | 'OUTPOSTS'\n    | 'GLACIER_IR'\n    | undefined\n","import { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { signHeaders, URIEncodingConfig, toTime } from './signature'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n    URIencodingConfig: URIEncodingConfig\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string, URIencodingConfig: URIEncodingConfig) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n        this.URIencodingConfig = URIencodingConfig\n    }\n\n    buildRequest(\n        method: HTTPMethod,\n        host: string,\n        path: string,\n        queryString: string,\n        body: string | ArrayBuffer,\n        headers: HTTPHeaders\n    ): AWSRequest {\n        const requestTimestamp: number = Date.now()\n        const date: string = toTime(requestTimestamp)\n\n        headers['Host'] = host\n        headers['X-Amz-Date'] = date\n\n        headers = signHeaders(\n            // headers\n            headers,\n\n            // requestTimestamp\n            requestTimestamp,\n\n            // method\n            method,\n\n            // path\n            path,\n\n            // querystring\n            queryString,\n\n            // body\n            body,\n\n            // AWS configuration\n            this.awsConfig,\n\n            // AwS target service name\n            this.serviceName,\n\n            // doubleEncoding: S3 does single-encoding of the uri component\n            // pathURIEncoding: S3 manipulates object keys, and forward slashes\n            // shouldn't be URI encoded\n            this.URIencodingConfig\n        )\n\n        // '?' should not be part of the querystring when we sign the headers\n        path = path !== '' ? path : '/'\n        let url = `${this.awsConfig.scheme}://${host}${path}`\n        if (queryString !== '') {\n            url += `?${queryString}`\n        }\n\n        return { url: url, headers: headers }\n    }\n\n    /**\n     * Property computing the URL to send the requests to when interacting with\n     * the specific AWS service the child class implements the functionalities of.\n     */\n    get host() {\n        return `${this.serviceName}.${this.awsConfig.region}.${this.awsConfig.endpoint}`\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AWSError","message","code","name","xmlDocument","doc","parseHTML","find","text","Error","signHeaders","headers","requestTimestamp","method","path","queryString","body","awsConfig","service","URIencodingConfig","sessionToken","derivedSigningKey","secretAccessKey","time","region","kSecret","date","toDate","kDate","hmac","kRegion","kService","deriveSigningKey","canonicalRequest","uri","query","payload","httpRequestMethod","toUpperCase","canonicalURI","length","URIEncode","createCanonicalURI","canonicalQueryString","qs","split","filter","e","map","v","parts","decodeURIComponent","sort","b","localeCompare","parseQueryString","uriComponent","encodeURIComponent","join","createCanonicalQueryString","canonicalHeaders","constructor","entries","values","toLowerCase","trim","Array","isArray","replace","createCanonicalHeaders","signedHeaders","createSignedHeaders","requestPayload","UnsignedPayload","crypto","createCanonicalPayload","createCanonicalRequest","stringToSign","hashedCanonicalRequest","requestDateTime","toTime","credentialScope","createCredentialScope","HashingAlgorithm","createStringToSign","sha256","signature","calculateSignature","authorizationHeader","accessKeyID","InvalidSignatureError","TypeError","keys","letter","c","isNumeric","includes","charCodeAt","toString","URIEncodingConfig","double","this","timestamp","Date","toISOString","substring","AWSConfig","options","InvalidAWSConfigError","accessKeyId","undefined","scheme","endpoint","S3Client","signedRequest","host","res","http","url","_handle_error","buckets","children","each","_","bucketDefinition","bucket","forEach","child","nodeName","assign","textContent","creationDate","parse","push","bucketName","prefix","querystring","Prefix","objects","objectDefinition","lastModified","etag","size","parseInt","storageClass","objectKey","S3Object","data","operation","response","errorCode","error_code","errorMessage","error","startsWith","S3ServiceError","awsError","parseXML","serviceName","now","S3Bucket"],"sourceRoot":""}
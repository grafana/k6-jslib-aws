{"version":3,"file":"kinesis.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/kinesis.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\n\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { JSONObject } from './json'\nimport { HTTPHeaders } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\nThis API is based on\nhttps://docs.aws.amazon.com/kinesis/latest/APIReference/API_Operations.html\n*/\n\n/**\n * Allows interacting with the Kinesis API.\n */\nexport class KinesisClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n    private readonly serviceVersion: string\n\n    /**\n     * A constructor function that creates a new instance of the Kinesis class.\n     * @param {AWSConfig} awsConfig - AWSConfig - This is the configuration object that is passed to\n     * the constructor.\n     * @returns A Proxy object.\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'kinesis')\n\n        this.serviceVersion = 'Kinesis_20131202'\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: false,\n            applyChecksum: true,\n        })\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Creates a new Kinesis stream with the specified name and options.\n     *\n     * @param {string} streamName - The name of the stream to create.\n     * @param {{\n     *   shardCount?: number;\n     *   streamModeDetails?: {\n     *     streamMode: StreamMode;\n     *   };\n     * }} [options={}] - An optional object containing configuration options for the stream.\n     * @param {number} [options.shardCount] - The number of shards for the stream. If not provided, the default value will be used.\n     * @param {{streamMode: StreamMode}} [options.streamModeDetails] - An optional object containing the stream mode details.\n     * @param {StreamMode} [options.streamModeDetails.streamMode] - The mode of the stream. If not provided, the default mode will be used.\n     *\n     * @throws {Error} Throws an error if the stream creation request fails.\n     * @returns {void}\n     */\n    async createStream(\n        streamName: string,\n        options: { shardCount?: number; streamModeDetails?: { streamMode: StreamMode } } = {}\n    ): Promise<void> {\n        const body = {\n            StreamName: streamName,\n            ...(options.shardCount && { ShardCount: options.shardCount }),\n            ...(options.streamModeDetails && { StreamMode: options.streamModeDetails.streamMode }),\n        }\n\n        await this._send_request('CreateStream', body)\n    }\n\n    /**\n     * Deletes a Kinesis stream with the specified parameters.\n     *\n     * @param {string} streamName - The name of the stream to delete.\n     * @param {{\n     *   streamARN?: string;\n     *   enforceConsumerDeletion?: boolean;\n     * }} [parameters={}] - An optional object containing configuration options for the stream deletion.\n     * @param {string} [parameters.streamARN] - The Amazon Resource Name (ARN) of the stream. If not provided, the ARN will be derived from the stream name.\n     * @param {boolean} [parameters.enforceConsumerDeletion] - Whether to enforce the deletion of all registered consumers before deleting the stream. Defaults to false.\n     *\n     * @throws {Error} Throws an error if the stream deletion request fails.\n     * @returns {void}\n     */\n    async deleteStream(\n        streamName: string,\n        parameters: { streamARN?: string; enforceConsumerDeletion?: boolean } = {}\n    ): Promise<void> {\n        const body = {\n            StreamName: streamName,\n            ...(parameters.streamARN && { StreamARN: parameters.streamARN }),\n            ...(parameters.enforceConsumerDeletion && {\n                EnforceConsumerDeletion: parameters.enforceConsumerDeletion,\n            }),\n        }\n\n        await this._send_request('DeleteStream', body)\n    }\n\n    /**\n     * Returns a list of Kinesis streams with the specified parameters.\n     *\n     * @param {{\n     *   exclusiveStartStreamName?: string;\n     *   limit?: number;\n     *   nextToken?: string;\n     * }} [parameters={}] - An optional object containing configuration options for listing the streams.\n     * @param {string} [parameters.exclusiveStartStreamName] - The name of the stream to start listing from. If not provided, the listing starts from the beginning.\n     * @param {number} [parameters.limit] - The maximum number of streams to list. If not provided, the default value will be used.\n     * @param {string} [parameters.nextToken] - A token to paginate the list of streams. If not provided, the first page will be returned.\n     *\n     * @throws {Error} Throws an error if the list streams request fails.\n     * @returns {Partial<ListStreamsResponse>} A partial of the ListStreamsResponse class.\n     */\n    async listStreams(\n        parameters: {\n            exclusiveStartStreamName?: string\n            limit?: number\n            nextToken?: string\n        } = {}\n    ): Promise<ListStreamsResponse> {\n        const body = {\n            ...(parameters.exclusiveStartStreamName && {\n                ExclusiveStartStreamName: parameters.exclusiveStartStreamName,\n            }),\n            ...(parameters.limit && { Limit: parameters.limit }),\n            ...(parameters.nextToken && { NextToken: parameters.nextToken }),\n        }\n\n        const res = await this._send_request('ListStreams', body)\n        return ListStreamsResponse.fromJson(res?.json() as JSONObject)\n    }\n\n    /**\n     * Sends multiple records to a Kinesis stream in a single request.\n     *\n     * @param {string} streamName - The name of the stream to put records into.\n     * @param {PutRecordsRequestEntry[]} records - An array of records to put into the stream.\n     *\n     * @throws {Error} Throws an error if the put records request fails.\n     * @returns {Partial<PutRecordsResponse>} A partial of the PutRecordsResponse class.\n     */\n    async putRecords(\n        records: PutRecordsRequestEntry[],\n        parameters: { streamName?: string; streamARN?: string } = {}\n    ): Promise<PutRecordsResponse> {\n        if (!parameters.streamName && !parameters.streamARN) {\n            throw new Error('Either streamName or streamARN must be provided')\n        }\n\n        const body = {\n            Records: records,\n            ...(parameters.streamName && { StreamName: parameters.streamName }),\n            ...(parameters.streamARN && { StreamARN: parameters.streamARN }),\n        }\n\n        const res = await this._send_request('PutRecords', body)\n        return PutRecordsResponse.fromJson(res?.json() as JSONObject)\n    }\n\n    /**\n     * Retrieves records from a Kinesis stream.\n     *\n     * @param {string} shardIterator - The shard iterator to start retrieving records from.\n     * @param {number} [limit] - The maximum number of records to return. If not provided, the default value will be used.\n     *\n     * @throws {Error} Throws an error if the get records request fails.\n     * @returns {Partial<GetRecordsResponse>} A partial of the GetRecordsResponse class.\n     */\n    async getRecords(\n        shardIterator: string,\n        parameters: { limit?: number; streamARN?: string } = {}\n    ): Promise<GetRecordsResponse> {\n        const body = {\n            ShardIterator: shardIterator,\n            ...(parameters.limit && { Limit: parameters.limit }),\n            ...(parameters.streamARN && { StreamARN: parameters.streamARN }),\n        }\n\n        const res = await this._send_request('GetRecords', body)\n        return GetRecordsResponse.fromJson(res?.json() as JSONObject)\n    }\n\n    /**\n     * Lists the shards in a Kinesis stream.\n     *\n     * @param {string} streamName - The name of the stream to list shards from.\n     * @param {{\n     *   nextToken?: string;\n     *   maxResults?: number;\n     * }} [parameters={}] - An optional object containing configuration options for listing shards.\n     * @param {string} [parameters.nextToken] - A token to specify where to start paginating the shard list. If not provided, the first page will be returned.\n     * @param {number} [parameters.maxResults] - The maximum number of shards to return. If not provided, the default value will be used.\n     *\n     * @throws {Error} Throws an error if the list shards request fails.\n     * @returns {ListShardsResponse} A ListShardsResponse class instance.\n     */\n    async listShards(\n        streamName: string,\n        parameters: { nextToken?: string; maxResults?: number } = {}\n    ): Promise<ListShardsResponse> {\n        const body = {\n            StreamName: streamName,\n            ...(parameters.nextToken && { NextToken: parameters.nextToken }),\n            ...(parameters.maxResults && {\n                MaxResults: parameters.maxResults,\n            }),\n        }\n\n        const res = await this._send_request('ListShards', body)\n        return ListShardsResponse.fromJson(res?.json() as JSONObject)\n    }\n\n    /**\n     * Retrieves a shard iterator for the specified shard in a Kinesis stream.\n     *\n     * @param {string} streamName - The name of the stream.\n     * @param {string} shardId - The shard ID for which to get the iterator.\n     * @param {string} shardIteratorType - The shard iterator type. One of 'AT_SEQUENCE_NUMBER', 'AFTER_SEQUENCE_NUMBER', 'TRIM_HORIZON', 'LATEST', or 'AT_TIMESTAMP'.\n     * @param {{\n     *   startingSequenceNumber?: string;\n     *   timestamp?: number;\n     * }} [parameters={}] - An optional object containing configuration options for the shard iterator.\n     * @param {string} [parameters.startingSequenceNumber] - The sequence number to start with when using 'AT_SEQUENCE_NUMBER' or 'AFTER_SEQUENCE_NUMBER' iterator types.\n     * @param {number} [parameters.timestamp] - The timestamp to start with when using the 'AT_TIMESTAMP' iterator type.\n     *\n     * @throws {Error} Throws an error if the get shard iterator request fails.\n     * @returns {string} The next position in the shard from which to start sequentially reading data records. If set to null, the shard has been closed and the requested iterator does not return any more data.\n     */\n    async getShardIterator(\n        streamName: string,\n        shardId: string,\n        shardIteratorType: ShardIteratorKind,\n        parameters: { startingSequenceNumber?: string; timestamp?: number } = {}\n    ): Promise<GetShardIteratorResponse> {\n        const body = {\n            StreamName: streamName,\n            ShardId: shardId,\n            ShardIteratorType: shardIteratorType,\n            ...(parameters.startingSequenceNumber && {\n                StartingSequenceNumber: parameters.startingSequenceNumber,\n            }),\n            ...(parameters.timestamp && { Timestamp: parameters.timestamp }),\n        }\n\n        const res = await this._send_request('GetShardIterator', body)\n        return GetShardIteratorResponse.fromJson(res?.json() as JSONObject)\n    }\n\n    private async _send_request<R extends ResponseType>(\n        action: string,\n        body: unknown\n    ): Promise<RefinedResponse<R>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceVersion}.${action}`,\n                },\n                body: JSON.stringify(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest('POST', signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error(action, res)\n        return res\n    }\n\n    /**\n     * If the response is an error, throw an error\n     *\n     * @param {string} operation - The name of the operation that was called.\n     * @param response - RefinedResponse<ResponseType | undefined>\n     * @returns The response is being returned.\n     */\n    _handle_error(operation: string, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new KinesisServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new KinesisServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n/* `KinesisServiceError` is a subclass of `AWSError` that adds an `operation` property */\nexport class KinesisServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a KinesisServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'KinesisServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * Describes the options for a Kinesis stream.\n */\ntype StreamMode = 'PROVISIONED' | 'ON_DEMAND'\n\n/**\n * Determines how the shard iterator is used to start reading data records from the shard.\n */\nexport type ShardIteratorKind =\n    | 'AT_SEQUENCE_NUMBER'\n    | 'AFTER_SEQUENCE_NUMBER'\n    | 'TRIM_HORIZON'\n    | 'LATEST'\n    | 'AT_TIMESTAMP'\n\n/**\n * Describes the status of a Kinesis data stream.\n */\nexport type StreamStatus = 'CREATING' | 'DELETING' | 'ACTIVE' | 'UPDATING'\n\nexport type StreamModeDetails = {\n    /**\n     * Specifies the capacity mode to which you want to set your data stream.\n     */\n    SteamMode: 'PROVISIONED' | 'ON_DEMAND'\n}\n\nexport class ListStreamsResponse {\n    /**\n     * Indicates whether there are more streams available to list.\n     */\n    hasMoreStreams: boolean\n\n    /**\n     * The token that identifies which batch of results you can retrieve.\n     */\n    nextToken?: string\n\n    /**\n     * The names of the streams that are associated with the AWS account making the ListStreams request.\n     */\n    streamNames: string[]\n\n    /**\n     * A list of StreamSummary objects.\n     */\n    streamSummaries: StreamSummary[]\n\n    constructor(\n        HasMoreStreams: boolean,\n        NextToken: string,\n        StreamNames: string[],\n        StreamSummaries: StreamSummary[]\n    ) {\n        this.hasMoreStreams = HasMoreStreams\n        this.nextToken = NextToken\n        this.streamNames = StreamNames\n        this.streamSummaries = StreamSummaries\n    }\n\n    static fromJson(result: JSONObject): ListStreamsResponse {\n        const {\n            HasMoreStreams = false,\n            NextToken = '',\n            StreamNames = [],\n            StreamSummaries = [],\n        } = result\n\n        return new ListStreamsResponse(\n            HasMoreStreams as boolean,\n            NextToken as string,\n            StreamNames as string[],\n            (StreamSummaries as JSONObject[])?.map(StreamSummary.fromJson) as StreamSummary[]\n        )\n    }\n}\n\n/**\n * Summarizes a Stream\n */\nexport class StreamSummary {\n    /**\n     * The Amazon Resource Name (ARN) for the stream.\n     */\n    streamARN: string\n\n    /**\n     * The time at which the stream was created.\n     */\n    streamCreationTimestamp: number\n\n    /**\n     * Specify the capacity mode to which you want to set your data stream.\n     */\n    streamModeDetails: StreamModeDetails\n\n    /**\n     * The name of the stream.\n     */\n    streamName: string\n\n    /**\n     * The current status of the stream being described.\n     */\n    streamStatus: StreamStatus\n\n    constructor(\n        StreamARN: string,\n        StreamCreationTimestamp: number,\n        StreamMode: StreamModeDetails,\n        StreamName: string,\n        StreamStatus: StreamStatus\n    ) {\n        this.streamARN = StreamARN\n        this.streamCreationTimestamp = StreamCreationTimestamp\n        this.streamModeDetails = StreamMode\n        this.streamName = StreamName\n        this.streamStatus = StreamStatus\n    }\n\n    static fromJson(summary: JSONObject): StreamSummary {\n        const {\n            StreamARN = '',\n            StreamCreationTimestamp = 0,\n            StreamModeDetails = {},\n            StreamName = '',\n            StreamStatus = '',\n        } = summary\n\n        return new StreamSummary(\n            StreamARN as string,\n            StreamCreationTimestamp as number,\n            StreamModeDetails as StreamModeDetails,\n            StreamName as string,\n            StreamStatus as StreamStatus\n        )\n    }\n}\n\n/**\n * Represents the output for PutRecords.\n */\nexport interface PutRecordsRequestEntry {\n    /**\n     * The data blob to put into the record, which is base64-encoded when the blob is serialized.\n     */\n    Data: string | ArrayBuffer\n\n    /**\n     * Determines which share in the stream the data record is assigned to.\n     */\n    PartitionKey: string\n}\n\n// Response class for PutRecords API\nexport class PutRecordsResponse {\n    /**\n     * The encryption type used on the records. This parameter can be one of the following values:\n     *   - NONE: Do not encrypt the records.\n     *   - KMS: Use server-side encryption on the records using a customer-managed AWS KMS key.\n     */\n    encryptionType: EncryptionType\n\n    /**\n     * The number of unsuccessfully processed records in a PutRecords request.\n     */\n    failedRecordCount: number\n\n    /**\n     * An array of successfully and unsuccessfully processed record results.\n     */\n    records: PutRecordsResultEntry[]\n\n    constructor(\n        encryptionType: 'NONE' | 'KMS',\n        failedRecordCount: number,\n        records: PutRecordsResultEntry[]\n    ) {\n        this.encryptionType = encryptionType\n        this.failedRecordCount = failedRecordCount\n        this.records = records\n    }\n\n    static fromJson(json: JSONObject): PutRecordsResponse {\n        const { EncryptionType = 'NONE', FailedRecordCount = 0, Records = [] } = json\n        const records = (Records as JSONObject[]).map(PutRecordsResultEntry.fromJson)\n\n        return new PutRecordsResponse(\n            EncryptionType as EncryptionType,\n            FailedRecordCount as number,\n            records\n        )\n    }\n}\n\ntype EncryptionType = 'NONE' | 'KMS'\n\n/**\n * Represents the result of an individual record from a PutRecords request.\n */\nexport class PutRecordsResultEntry {\n    /**\n     * The sequence number for an individual record result.\n     */\n    sequenceNumber: string\n\n    /**\n     * The shard ID for an individual record result.\n     */\n    shardId: string\n\n    constructor(sequenceNumber: string, shardId: string) {\n        this.sequenceNumber = sequenceNumber\n        this.shardId = shardId\n    }\n\n    static fromJson(json: JSONObject): PutRecordsResultEntry {\n        return new PutRecordsResultEntry(json.SequenceNumber as string, json.ShardId as string)\n    }\n}\n\n/**\n * Represents the response format of the GetRecords operation.\n */\nexport class GetRecordsResponse {\n    /**\n     * The next position in the shard from which to start sequentially reading data records.\n     */\n    nextShardIterator: string\n\n    /**\n     * The data records retrieved from the shard.\n     */\n    records: Record[]\n\n    /**\n     * The number of milliseconds the GetRecords response is from the\n     * tip of the stream, indicating how far behind current time the\n     * consumer is.\n     *\n     * A value of zero indicates that record processing is caught\n     * up, and there are no new records to process at this moment.\n     */\n    millisBehindLatest: number\n\n    constructor(nextShardIterator: string, records: Record[], millisBehindLatest: number) {\n        this.nextShardIterator = nextShardIterator\n        this.records = records\n        this.millisBehindLatest = millisBehindLatest\n    }\n\n    static fromJson(json: JSONObject): GetRecordsResponse {\n        const { NextShardIterator = '', Records = [], MillisBehindLatest = 0 } = json\n        const records = (Records as JSONObject[]).map(Record.fromJson)\n\n        return new GetRecordsResponse(\n            NextShardIterator as string,\n            records as Record[],\n            MillisBehindLatest as number\n        )\n    }\n}\n\n/**\n * The unit of data of the Kinesis data stream, which is composed of a sequence\n * number, a partition key, and a data blob.\n */\nclass Record {\n    /**\n     * The data blob.\n     */\n    data: string | ArrayBuffer\n\n    /**\n     * Identifies which shard in the stream the data record is assigned to.\n     */\n    partitionKey: string\n\n    /**\n     * The unique identifier of the record in the stream.\n     */\n    sequenceNumber: string\n\n    constructor(data: string | ArrayBuffer, partitionKey: string, sequenceNumber: string) {\n        this.data = data\n        this.partitionKey = partitionKey\n        this.sequenceNumber = sequenceNumber\n    }\n\n    static fromJson(json: JSONObject): Record {\n        return new Record(\n            json.Data as string | ArrayBuffer,\n            json.PartitionKey as string,\n            json.SequenceNumber as string\n        )\n    }\n}\n\n// Response class for ListShards API\nexport class ListShardsResponse {\n    /**\n     * An array of JSON objects.\n     *\n     * Each object represents one shard and specifies the IDs of the shard, the\n     * shard's parent, and the shard that's adjacent to the shard's parent.\n     */\n    shards: Shard[]\n\n    /**\n     * When the number of shards in the data stream is greater than the\n     * default value for the MaxResults parameter, or if you explicitly specify\n     * a value for MaxResults that is less than the number of shards in the data\n     * stream, the response includes a pagination token named NextToken.\n     */\n    nextToken?: string\n\n    constructor(shards: Shard[], nextToken?: string) {\n        this.shards = shards\n        this.nextToken = nextToken\n    }\n\n    static fromJson(json: JSONObject): ListShardsResponse {\n        const { Shards = [], NextToken } = json\n        const shards = (Shards as JSONObject[]).map(Shard.fromJson)\n\n        return new ListShardsResponse(shards, NextToken as string | undefined)\n    }\n}\n\n/**\n * A uniquely identified group of data records in a Kinesis data stream.\n */\nexport class Shard {\n    /**\n     * The unique identifier of the shard within the stream.\n     */\n    id: string\n\n    /**\n     * The shard ID of the shard's parent.\n     */\n    parentShardId?: string\n\n    /**\n     * The shard ID of the shard adjacent to the shard's parent.\n     */\n    adjacentParentShardId?: string\n\n    /**\n     * The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.\n     */\n    hashKeyRange: HashKeyRange\n\n    sequenceNumberRange: SequenceNumberRange\n\n    constructor(\n        id: string,\n        hashKeyRange: HashKeyRange,\n        sequenceNumberRange: SequenceNumberRange,\n        parentShardId?: string,\n        adjacentParentShardId?: string\n    ) {\n        this.id = id\n        this.parentShardId = parentShardId\n        this.adjacentParentShardId = adjacentParentShardId\n        this.hashKeyRange = hashKeyRange\n        this.sequenceNumberRange = sequenceNumberRange\n    }\n\n    static fromJson(json: JSONObject): Shard {\n        return new Shard(\n            json.ShardId as string,\n            json.HashKeyRange as unknown as HashKeyRange,\n            json.SequenceNumberRange as unknown as SequenceNumberRange,\n            json.ParentShardId as string | undefined,\n            json.AdjacentParentShardId as string | undefined\n        )\n    }\n}\n\n/**\n * Describes the range of possible hash key values for the shard, which is\n * a set of ordered contiguous positive integers.\n */\nexport interface HashKeyRange {\n    /**\n     * The starting hash key of the hash key range.\n     */\n    startingHashKey: string\n\n    /**\n     * The ending hash key of the hash key range.\n     */\n    endingHashKey: string\n}\n\n/**\n * The range of possible sequence numbers for the shard.\n */\nexport interface SequenceNumberRange {\n    /**\n     * The ending sequence number for the range.\n     *\n     * Shards that are in the OPEN state have an ending sequence number of null.\n     */\n    endingSequenceNumber?: string\n\n    /**\n     * The starting sequence number for the range.\n     */\n    startingSequenceNumber: string\n}\n\n/**\n * Describes a shard iterator response.\n */\nclass GetShardIteratorResponse {\n    /**\n     * The position in the shard from which to start reading data records sequentially.\n     */\n    shardIterator: string\n\n    constructor(shardIterator: string) {\n        this.shardIterator = shardIterator\n    }\n\n    static fromJson(json: JSONObject): GetShardIteratorResponse {\n        return new GetShardIteratorResponse(json.ShardIterator as string)\n    }\n}\n","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","undefined","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","options","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","t","r","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","toPrimitive","String","_toPrimitive","KinesisClient","_AWSClient","_send_request2","_getShardIterator","_listShards","_getRecords","_putRecords","_listStreams","_deleteStream","_createStream","awsConfig","serviceVersion","serviceName","commonHeaders","_callee","streamName","_args","_context","StreamName","shardCount","ShardCount","streamModeDetails","StreamMode","streamMode","_send_request","_x","_callee2","parameters","_args2","_context2","streamARN","StreamARN","enforceConsumerDeletion","EnforceConsumerDeletion","_x2","_callee3","res","_args3","_context3","exclusiveStartStreamName","ExclusiveStartStreamName","limit","Limit","nextToken","NextToken","ListStreamsResponse","fromJson","_callee4","records","_args4","_context4","Records","PutRecordsResponse","_x3","_callee5","shardIterator","_args5","_context5","ShardIterator","GetRecordsResponse","_x4","_callee6","_args6","_context6","maxResults","MaxResults","ListShardsResponse","_x5","_callee7","shardId","shardIteratorType","_args7","_context7","ShardId","ShardIteratorType","startingSequenceNumber","StartingSequenceNumber","timestamp","Timestamp","GetShardIteratorResponse","_x6","_x7","_x8","_callee8","action","signedRequest","_context8","sign","http","_handle_error","_x9","_x10","operation","errorCode","error_code","errorMessage","KinesisServiceError","AWSClient","_endpoint","_super2","_this2","HasMoreStreams","StreamNames","StreamSummaries","hasMoreStreams","streamNames","streamSummaries","_result$HasMoreStream","_result$NextToken","_result$StreamNames","_result$StreamSummari","StreamSummary","StreamCreationTimestamp","StreamStatus","streamCreationTimestamp","streamStatus","summary","_summary$StreamARN","_summary$StreamCreati","_summary$StreamModeDe","StreamModeDetails","_summary$StreamName","_summary$StreamStatus","encryptionType","failedRecordCount","_json$EncryptionType","EncryptionType","_json$FailedRecordCou","FailedRecordCount","_json$Records","PutRecordsResultEntry","sequenceNumber","SequenceNumber","nextShardIterator","millisBehindLatest","_json$NextShardIterat","NextShardIterator","_json$Records2","_json$MillisBehindLat","MillisBehindLatest","Record","data","partitionKey","Data","PartitionKey","shards","_json$Shards","Shards","Shard","id","hashKeyRange","sequenceNumberRange","parentShardId","adjacentParentShardId","HashKeyRange","SequenceNumberRange","ParentShardId","AdjacentParentShardId"],"sourceRoot":""}
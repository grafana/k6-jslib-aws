{"version":3,"file":"secrets-manager.min.js","mappings":"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","sources":["webpack://k6-jslib-aws/./node_modules/uuid/index.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/bytesToUuid.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/rng-browser.js","webpack://k6-jslib-aws/./node_modules/uuid/v1.js","webpack://k6-jslib-aws/./node_modules/uuid/v4.js","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/secrets-manager.ts"],"sourcesContent":["var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    code: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto, { hmac, sha256 } from 'k6/crypto'\nimport { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\n\n/**\n * Includes AWS v4 signing information to the provided HTTP headers object.\n *\n * This function will compute the `Authorization` header signature for the\n * provided request components, and add it to `header`. It will do so by following\n * the procedure detailled AWS' API docs: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n *\n * The resulting `Authorization` header value is computed for the provided\n * headers object. Thus, any modification of the headers past a call to `signHeaders`\n * would effectively invalidate their signature, and the function should be\n * called again to recompute it.\n *\n * @param  {object} headers - HTTP headers request to sign.\n * @param  {number} requestTimestamp - Timestamp of the request\n * @param  {string} method - HTTP method used\n * @param  {string} path - HTTP request URL's path\n * @param  {string} queryString - HTTP request URL's querystring\n * @param  {string | ArrayBuffer} body - HTTP request's payload\n * @param  {AWSConfig} - AWS configuration\n * @param  {string} service - AWS service name\n * @param  {URIEncodingConfig} - URI encoding configuration\n */\nexport function signHeaders(\n    headers: HTTPHeaders,\n    requestTimestamp: number,\n    method: HTTPMethod,\n    path: string,\n    queryString: string,\n    body: string | ArrayBuffer,\n    awsConfig: AWSConfig,\n    service: string,\n    URIencodingConfig: URIEncodingConfig\n): HTTPHeaders {\n    // If the config contains a session token, we should add it to the headers\n    // as a `X-Amz-Security-Token` header, cf: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    if (awsConfig.sessionToken) {\n        headers['X-Amz-Security-Token'] = awsConfig.sessionToken\n    }\n\n    const derivedSigningKey = deriveSigningKey(\n        awsConfig.secretAccessKey,\n        requestTimestamp,\n        awsConfig.region,\n        service\n    )\n\n    const canonicalRequest = createCanonicalRequest(\n        method,\n        path,\n        queryString,\n        headers,\n        body,\n        URIencodingConfig\n    )\n\n    const stringToSign = createStringToSign(\n        requestTimestamp,\n        awsConfig.region,\n        service,\n        sha256(canonicalRequest, 'hex')\n    )\n\n    const credentialScope = createCredentialScope(requestTimestamp, awsConfig.region, service)\n    const signedHeaders = createSignedHeaders(headers)\n    const signature = calculateSignature(derivedSigningKey, stringToSign)\n    const authorizationHeader = `${HashingAlgorithm} Credential=${awsConfig.accessKeyID}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${signature}`\n\n    headers['Authorization'] = authorizationHeader\n\n    return headers\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\n/**\n * Calculte the signature for AWS signature version 4\n *\n * @param  {string} derivedSigningKey - dervied signing key as computed by `deriveSigningKey`\n * @param  {string} stringToSign - String to sign as computed by `createStringToSign`\n * @return {string}\n */\nexport function calculateSignature(derivedSigningKey: ArrayBuffer, stringToSign: string): string {\n    return hmac('sha256', derivedSigningKey, stringToSign, 'hex')\n}\n/**\n * Derives the signing key for authenticating requests signed with\n * the Signature version 4 authentication protocol.\n *\n * deriveSigningKey produces a signing key by creating a series of\n * hash-based message authentication codes (HMACs) represented in\n * a binary format.\n *\n * The derived signing key is specific to the date it's made at, as well as\n * the service and region it targets.\n *\n * @param  {string} secretAccessKey - the AWS secret access key to derive the signing key for\n * @param  {number} time - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function deriveSigningKey(\n    secretAccessKey: string,\n    time: number,\n    region: string,\n    service: string\n): ArrayBuffer {\n    const kSecret = secretAccessKey\n    const date = toDate(time)\n\n    // FIXME: hmac takes ArrayBuffer as input, but returns bytes (number[]).\n    // How does one convert from one to the other?\n    const kDate: any = hmac('sha256', 'AWS4' + kSecret, date, 'binary')\n    const kRegion: any = hmac('sha256', kDate, region, 'binary')\n    const kService: any = hmac('sha256', kRegion, service, 'binary')\n    const kSigning: any = hmac('sha256', kService, 'aws4_request', 'binary')\n\n    return kSigning\n}\n\n// Hashing Algorithm to use in the signature process\nexport const HashingAlgorithm = 'AWS4-HMAC-SHA256'\n\n/**\n * Certain services, such as S3, allow for unsigned payloads. If\n *  producing a signed canonical request for such service, pass\n *  the `UnsignedPayload` constant value as the payload parameter.\n */\nexport const UnsignedPayload = 'UNSIGNED-PAYLOAD'\n\n/**\n * Create the \"string to sign\" part of the signature Version 4 protocol.\n *\n * The \"string to sign\" includes meta information about your request and\n * about the canonical request that you created with `createCanonicalRequest`.\n * It is used hand in hand with the signing key to create the request signature.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @param  {string} hashedCanonicalRequest - canonical request as produced by calling the createCanonicalRequest function,\n *     hashed using the SHA256 algorithm (encoded in hexadecimal format).\n * @return {string}\n */\nexport function createStringToSign(\n    requestTimestamp: number,\n    region: string,\n    service: string,\n    hashedCanonicalRequest: string\n): string {\n    // the request date specified in ISO8601 format: YYYYMMDD'T'HHMMSS'Z'\n    const requestDateTime = toTime(requestTimestamp)\n\n    // The credential scope value, consisting of the date in YYYYMMDD format,\n    // the targeted region, the targeted service, and a termination string.\n    // Note that the region and service MUST be UTF-8 encoded.\n    const credentialScope = createCredentialScope(requestTimestamp, region, service)\n\n    const stringToSign = [\n        // Algorithm\n        HashingAlgorithm,\n\n        // RequestDateTime\n        requestDateTime,\n\n        // CredentialScope\n        credentialScope,\n\n        // HashedCanonicalRequest\n        hashedCanonicalRequest,\n    ].join('\\n')\n\n    return stringToSign\n}\n\n/**\n *\n * Helper function creating a credential scope string to use in the signature\n * version 4 process. A credential scope consists of the date of the request\n * in YYYYMMDD format, the targeted region, the targeted service, and a\n * termination string.\n *\n * Note that the region and service MUST be UTF-8 encoded.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function createCredentialScope(\n    requestTimestamp: number,\n    region: string,\n    service: string\n): string {\n    return [toDate(requestTimestamp), region, service, 'aws4_request'].join('/')\n}\n\n/**\n *  Create a string that includes information from your request\n * in a AWS signature v4 standardized (canonical) format.\n *\n * @param  {string} method - the HTTP request method\n * @param  {string} uri - URI-encoded version of the absolute path component of the URI\n * @param  {string} query - request's query string\n * @param  {Object} headers - all the HTTP headers that you wish to include with the signed request\n * @param  {string | ArrayBuffer} payload -  payload to include as the body of the request\n * @param  {URIEncodingConfig} URIencodingConfig- URI encoding configuration\n * @return {string}\n */\nexport function createCanonicalRequest(\n    method: HTTPMethod,\n    uri: string,\n    query: string,\n    headers: HTTPHeaders,\n    payload: string | ArrayBuffer,\n    URIencodingConfig: URIEncodingConfig\n): string {\n    const httpRequestMethod = method.toUpperCase()\n    const canonicalURI = createCanonicalURI(uri, URIencodingConfig)\n    const canonicalQueryString = createCanonicalQueryString(query)\n    const canonicalHeaders = createCanonicalHeaders(headers)\n    const signedHeaders = createSignedHeaders(headers)\n    const requestPayload = createCanonicalPayload(payload)\n\n    const canonicalRequest = [\n        httpRequestMethod,\n        canonicalURI,\n        canonicalQueryString,\n        canonicalHeaders,\n        signedHeaders,\n        requestPayload,\n    ].join('\\n')\n\n    return canonicalRequest\n}\n\n/**\n *  Creates the (canonical) URI-encoded version of the\n *  absolute path component of the URI: everything in the URI\n *  from the HTTP host to the question mark character (\"?\")\n *  that begins the query string parameters (if any).\n *\n * @param  {string} uri - URI to canonize\n * @param  {URIEncodingConfig} - URI encoding configuration\n * @return {string} - canonical URL\n */\nexport function createCanonicalURI(uri: string, URIencodingConfig: URIEncodingConfig): string {\n    if (uri == '/') {\n        return uri\n    }\n\n    let canonicalURI = uri\n    if (uri[uri.length - 1] == '/' && canonicalURI[canonicalURI.length - 1] != '/') {\n        canonicalURI += '/'\n    }\n\n    canonicalURI = URIEncode(canonicalURI, URIencodingConfig.path)\n\n    return URIencodingConfig.double ? URIEncode(canonicalURI, URIencodingConfig.path) : canonicalURI\n}\n\n/**\n * Creates the canonical form of the request's query\n * string. If the request does not include a query string,\n * provide an empty string.\n *\n * @param  {String | Object} qs - query string to canonize\n * @return {string}\n */\nexport function createCanonicalQueryString(qs: string): string {\n    if (qs === '') {\n        return ''\n    }\n\n    // const intermediary: { [key: string]: string } = parseQueryString(qs)\n\n    // return Object.keys(intermediary)\n    //     .sort()\n    //     .map((key: string) => {\n    //         // const values: string[] = Array.isArray(intermediary[key])\n    //         //     ? intermediary[key]\n    //         //     : [intermediary[key]]\n    //         const values = intermediary[key]\n\n    //         return values\n    //             .sort()\n    //             .map((val: string) => encodeURIComponent(key) + '=' + encodeURIComponent(val))\n    //             .join('&')\n    //     })\n    //     .join('&')\n\n    return parseQueryString(qs)\n        .map(([key, value]: [string, string]): string => {\n            let uriComponent = encodeURIComponent(key) + '='\n            if (value !== 'undefined') {\n                uriComponent += encodeURIComponent(value)\n            }\n\n            return uriComponent\n        })\n        .join('&')\n}\n\n/**\n * Create the canonical form of the request's headers.\n * Canonical headers consist of all the HTTP headers you\n * are including with the signed request.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the headers should at least\n * contain the `host` header.\n *   * for HTTP/2, the `:authority` header must be used instead\n * of `host`.\n *\n * @param  {Object} headers\n * @return {string}\n */\nexport function createCanonicalHeaders(headers: HTTPHeaders) {\n    if (headers.constructor !== Object || Object.entries(headers).length === 0) {\n        return ''\n    }\n\n    const canonicalHeaders = Object.entries(headers)\n        .map(([name, values]) => {\n            const canonicalName = name.toLowerCase().trim()\n            const normalizedValues = Array.isArray(values) ? values : [values]\n\n            // Note that we do not need to sort values\n            const canonicalValues = normalizedValues\n                .map((v) => {\n                    // convert sequential spaces to a single space\n                    return v.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '')\n                })\n                .join(',') // standard for multiple values in a HTTP header\n\n            return canonicalName + ':' + canonicalValues + '\\n'\n        })\n        .sort()\n        .join('')\n\n    return canonicalHeaders\n}\n\n/**\n * Create the canonical request's signed headers.\n *\n * The signed headers part of the request contains the\n * list of headers included in the request's signing process.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the `host` header must be included.\n *   * for HTTP/2 requests, the `:authority` header must be included instead\n *   of host.\n *   * if used, the `x-amz-date` header must be included.\n *\n * @param  {Object} headers\n * @return {string}\n * @throws {TypeError} - on headers not being an Object, or being empty.\n */\nexport function createSignedHeaders(headers: { [key: string]: string }) {\n    if (headers.constructor !== Object) {\n        throw new TypeError('headers should be an object')\n    }\n\n    if (Object.entries(headers).length === 0) {\n        throw 'headers should at least contain either the Host (HTTP 1.1) or :authority (HTTP 2) parameter'\n    }\n\n    // To create the signed headers list, convert\n    // all header names to lowercase, sort them by\n    // character code, and use a semicolon to separate\n    // the header names.\n    const result = Object.keys(headers)\n        .map((name) => name.toLowerCase().trim())\n        .sort()\n        .join(';')\n\n    return result\n}\n\n/**\n * Create the canonical form of the request's payload.\n *\n * The canonical payload consists in a lowercased, hex encoded,\n * SHA256 hash of the requests body/payload.\n *\n * Certain services, such as S3, allow for unsigned payload. If\n * producing a signed canonical request for such service, pass\n * the `UnsignedPayload` constant value as the payload parameter.\n *\n * @param  {String | ArrayBuffer} payload\n * @return {string}\n */\nexport function createCanonicalPayload(payload: string | ArrayBuffer) {\n    if (payload === UnsignedPayload) {\n        return payload\n    }\n\n    // Note that if the paylaod is null, we convert it\n    // to an empty string.\n    // TODO: Should switching to empty string if null impact headers?\n    return crypto.sha256(payload || '', 'hex').toLowerCase()\n}\n\n/**\n * URIEncodes encodes every bytes of a URI to be URL-safe.\n *\n * This implementation is specific to AWS; who intended to make it as\n * close as possible to the underlying RFC 3946. It:\n *   * URI encode every byte except the unreserved characters: 'A'-'Z', 'a'-'z', '0'-'9',\n *     '-', '.', '_', and '~'.\n *   * considers the space character as a reserved character and must URI encodes\n *     encodes it as \"%20\" (and not as \"+\").\n *   * URI encodes every byte by prefixing with '%' the two-digit hexadecimal value of the byte.\n *   * If the `path` argument is set, forward slashes are not encoded, to fit with\n *     S3 requirements.\n *\n * N.B: this implementation differs with ES6' mainly in that it does\n * encode the \"'\" character.\n *\n * Based on AWS implementation: https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/util/SdkHttpUtils.java#L66\n * Encoding specs: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n *\n * @param {string} uri - uri to encode\n * @param {boolean} path - slash characters should be encoded everywhere,\n *     but in paths, set to false when encoding a path\n * @return {string} the URI encoded result\n */\nexport function URIEncode(uri: string, path: boolean): string {\n    if (uri == '') {\n        return uri\n    }\n\n    return uri\n        .split('') // to be able to map over a string, because... javascript...\n        .map((letter: string) => {\n            if (isAlpha(letter) || isNumeric(letter) || '-._~'.includes(letter)) {\n                return letter\n            }\n\n            // Space should be explicitly encoded to as %20.\n            if (letter == ' ') {\n                return '%20'\n            }\n\n            // If the URI is a path, the forward slash shouldn't\n            // be encoded.\n            if (letter == '/' && path) {\n                return '/'\n            }\n\n            return '%' + letter.charCodeAt(0).toString(16).toUpperCase()\n        })\n        .join('')\n}\n\n/**\n * Class holding URI encoding configuration\n */\nexport class URIEncodingConfig {\n    double: boolean\n    path: boolean\n\n    /**\n     *\n     * @param {boolean} double - should the URI be double encoded?\n     * @param {boolean} path - is the URI a path? If so, its forward\n     *     slashes won't be URIencoded.\n     */\n    constructor(double: boolean, path: boolean) {\n        this.double = double\n        this.path = path\n    }\n}\n\n/**\n * Compute the request time value as specified by the ISO8601\n * format: YYYYMMDD'T'HHMMSS'Z'\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toTime(timestamp: number): string {\n    return new Date(timestamp).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n}\n/**\n * Computethe request date value in the format: YYYMMDD\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toDate(timestamp: number): string {\n    return toTime(timestamp).substring(0, 8)\n}\n\n/**\n * Parse a HTTP request URL's querystring into an object\n * containing its `key=value` pairs.\n *\n * @param  {string} qs\n * @return {object}\n */\nexport function parseQueryString(qs: string): Array<[string, string]> {\n    if (qs.length === 0) {\n        return []\n    }\n\n    return qs\n        .split('&')\n        .filter((e) => e)\n        .map((v: string): [string, string] => {\n            const parts = v.split('=', 2) as [string, string]\n            const key = decodeURIComponent(parts[0])\n            let value = decodeURIComponent(parts[1])\n            if (value === 'undefined') {\n                value = ''\n            }\n            return [key, value]\n        })\n        .sort((a: [string, string], b: [string, string]) => {\n            return a[0].localeCompare(b[0])\n        })\n}\n\nfunction isAlpha(c: string): boolean {\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')\n}\n\nfunction isNumeric(c: string): boolean {\n    return c >= '0' && c <= '9'\n}\n\n// FIXME: finish implementation when needed\n// See the following for more details:\n//   * https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n//   * https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n// export function signQueryString(\n// queryString,\n// requestTimestamp,\n// accessKeyID,\n// secretAccessKey,\n// region,\n// service,\n// ttl, // in seconds\n// headers,\n// doubleURIEncoding = true\n// ) {\n// const credential = [accessKeyID, toDate(requestTimestamp), region, service].join('/')\n//\n// const canonicalRequest = createCanonicalRequest(\n// method,\n// path,\n// queryString,\n// headers,\n// body,\n// doubleURIEncoding\n// )\n//\n// const derivedSigningKey = deriveSigningKey(secretAccessKey, requestTimestamp, region, service)\n//\n// const stringToSign = createStringToSign(\n// requestTimestamp,\n// region,\n// service,\n// sha256(canonicalRequest, 'hex')\n// )\n//\n// const signedHeaders = createSignedHeaders(headers)\n// const signature = calculateSignature(derivedSigningKey, stringToSign)\n//\n// return [\n// `X-Amz-Algorithm=${HashingAlgorithm}`,\n// `X-Amz-Credential=${crediental}`,\n// `X-Amz-Date=${toTime(requestTimestamp)}`,\n// `X-Amz-Expires=${ttl}`,\n// `X-Amz-SignedHeaders=${signedHeaders}`,\n// `X-Amz-Signature=${signature}`,\n//`X-Amz-Security-Token=`,  // TODO: optional\n// ].join('&')\n// }\n","import { HTTPScheme } from './http'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyID: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme} ['https']\n     */\n    scheme: HTTPScheme = 'https'\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint: string = 'amazonaws.com'\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (options.region === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS region; reason: should be a non empty string'\n            )\n        }\n\n        if (options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS access key ID; reason: should be a non empty string'\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS secret access key; reason: should be a non empty string'\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyID = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.scheme !== undefined) {\n            this.scheme = options.scheme\n        }\n\n        if (options.endpoint !== undefined) {\n            this.endpoint = options.endpoint\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { signHeaders, URIEncodingConfig, toTime } from './signature'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n    URIencodingConfig: URIEncodingConfig\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string, URIencodingConfig: URIEncodingConfig) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n        this.URIencodingConfig = URIencodingConfig\n    }\n\n    buildRequest(\n        method: HTTPMethod,\n        host: string,\n        path: string,\n        queryString: string,\n        body: string | ArrayBuffer,\n        headers: HTTPHeaders\n    ): AWSRequest {\n        const requestTimestamp: number = Date.now()\n        const date: string = toTime(requestTimestamp)\n\n        headers['Host'] = host\n        headers['X-Amz-Date'] = date\n\n        headers = signHeaders(\n            // headers\n            headers,\n\n            // requestTimestamp\n            requestTimestamp,\n\n            // method\n            method,\n\n            // path\n            path,\n\n            // querystring\n            queryString,\n\n            // body\n            body,\n\n            // AWS configuration\n            this.awsConfig,\n\n            // AwS target service name\n            this.serviceName,\n\n            // doubleEncoding: S3 does single-encoding of the uri component\n            // pathURIEncoding: S3 manipulates object keys, and forward slashes\n            // shouldn't be URI encoded\n            this.URIencodingConfig\n        )\n\n        // '?' should not be part of the querystring when we sign the headers\n        path = path !== '' ? path : '/'\n        let url = `${this.awsConfig.scheme}://${host}${path}`\n        if (queryString !== '') {\n            url += `?${queryString}`\n        }\n\n        return { url: url, headers: headers }\n    }\n\n    /**\n     * Property computing the URL to send the requests to when interacting with\n     * the specific AWS service the child class implements the functionalities of.\n     */\n    get host() {\n        return `${this.serviceName}.${this.awsConfig.region}.${this.awsConfig.endpoint}`\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient, AWSRequest } from './client'\nimport { AWSError } from './error'\nimport { AWSConfig } from './config'\nimport { InvalidSignatureError, URIEncodingConfig } from './signature'\nimport { v4 as uuidv4 } from 'uuid'\nimport { HTTPMethod, HTTPHeaders } from './http'\n\n/**\n * Class allowing to interact with Amazon AWS's SecretsManager service\n */\nexport class SecretsManagerClient extends AWSClient {\n    /**\n     * HTTP Method to use when interacting with the Secrets Manager service.\n     */\n    method: HTTPMethod\n\n    /**\n     * HTTP headers to use accross all requests to the Secrets Manager service.\n     */\n    commonHeaders: HTTPHeaders\n\n    /**\n     * Create a SecretsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        const URIencodingConfig = new URIEncodingConfig(true, false)\n        super(awsConfig, 'secretsmanager', URIencodingConfig)\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Accept-Encoding': 'identity',\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Returns a list of all secrets owned by the authenticated sender of the request.\n     * To use this operation, you must have the secretsmanager:ListSecrets permission.\n     *\n     * @return  {Array.<Secret>} secrets - An array of objects describing Secret Manager's secrets\n     * @throws  {SecretsManagerServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listSecrets(): Array<Secret> {\n        const body = JSON.stringify({})\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `${this.serviceName}.ListSecrets`,\n            }\n        )\n\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListSecrets', res)\n        const json: JSONArray = res.json('SecretList') as JSONArray\n\n        return json.map((s) => Secret.fromJSON(s as JSONObject))\n    }\n\n    /**\n     * Retrieves a secret from Amazon Sercets Manager\n     *\n     * @param {string} id - The ARN or name of the secret to retrieve.\n     * @returns {Secret} - returns the content of the fetched Secret object.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    getSecret(id: string): Secret | undefined {\n        const body = JSON.stringify({ SecretId: id })\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `${this.serviceName}.GetSecretValue`,\n            }\n        )\n\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('GetSecretValue', res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Creates a new secret\n     *\n     * Note that this method only supports string-based values at the moment.\n     *\n     * @param  {string} name - The name of the new secret.\n     *     The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {string} description - The description of the secret.\n     * @param  {string} versionID=null - Version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     *     algorithm.\n     * @param  {Array.<Object>} tags=[] - A list of tags to attach to the secret. Each tag is a key and\n     *     value pair of strings in a JSON text string. Note that tag key names are case sensitive.\n     * @returns {Secret} - returns the created secret\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    createSecret(\n        name: string,\n        secret: string,\n        description: string,\n        versionID?: string,\n        tags?: Array<Object>\n    ): Secret {\n        versionID = versionID || uuidv4()\n\n        const body = JSON.stringify({\n            Name: name,\n            Description: description,\n            SecretString: secret,\n            ClientRequestToken: versionID,\n            Tags: tags,\n        })\n\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `${this.serviceName}.CreateSecret`,\n            }\n        )\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        // headers['X-Amz-Target'] = `${this.serviceName}.CreateSecret`\n\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('CreateSecret', res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n    /**\n     * Update a secret's value.\n     *\n     * Note that this method only support string-based values at the moment.\n     *\n     * @param  {string} id - The ARN or name of the secret to update.\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {} versionID=null  - A unique identifier for the new version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    putSecretValue(id: string, secret: string, versionID?: string): Secret {\n        versionID = versionID || uuidv4()\n\n        const body = JSON.stringify({\n            SecretId: id,\n            SecretString: secret,\n            ClientRequestToken: versionID,\n        })\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `${this.serviceName}.PutSecretValue`,\n            }\n        )\n\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('PutSecretValue', res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Deletes a secret and all of its versions.\n     *\n     * You can specify a recovery window during which you can restore the secret.\n     * The minimum recovery window is 7 days. The default recovery window is 30 days.\n     *\n     * @param {string} secretID - The ARN or name of the secret to delete.\n     * @param {number} recoveryWindow - The number of days from 7 to 30 that Secrets Manager\n     *     waits before permanently deleting the secret.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    deleteSecret(\n        id: string,\n        { recoveryWindow = 30, noRecovery = false }: { recoveryWindow: number; noRecovery: boolean }\n    ) {\n        const payload: { [key: string]: string | boolean | number } = {\n            SecretId: id,\n        }\n\n        // noRecovery and recoveryWindow are exclusive parameters\n        if (noRecovery === true) {\n            payload['ForceDeleteWithoutRecovery'] = true\n        } else {\n            payload['RecoveryWindowInDays'] = recoveryWindow\n        }\n\n        const body = JSON.stringify(payload)\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `${this.serviceName}.DeleteSecret`,\n            }\n        )\n\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('DeleteSecret', res)\n    }\n\n    // TODO: operation should be an enum\n    _handle_error(operation: string, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SecretsManagerServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SecretsManagerServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n// TODO: create a Tags type\n\n/**\n * Class representing a Secret Manager's secret\n */\nexport class Secret {\n    name: string\n    arn: string\n    secret: string\n    createdDate: number\n    lastAccessedDate: number\n    lastChangedDate: number\n    tags: Array<{ [key: string]: string }>\n\n    /**\n     * Constructs a Secret Manager's Secret\n     *\n     * @param  {string} name - The friendly name of the secret.\n     * @param  {string} arn - The ARN of the secret.\n     * @param  {number} createdDate - The date and time that this version of the secret was created.\n     * @param  {number} lastAccessedDate - The last date that this secret was accessed. This value is\n     *     truncated to midnight of the date and therefore shows only the date, not the time.\n     * @param  {number} lastChangedDate - The last date and time that this secret was modified in any way.\n     * @param  {Array.<Object>} tags - The list of user-defined tags associated with the secret.\n     */\n    constructor(\n        name: string,\n        arn: string,\n        secretString: string,\n        createdDate: number,\n        lastAccessedDate: number,\n        lastChangedDate: number,\n        tags: Array<{ [key: string]: string }> = []\n    ) {\n        this.name = name\n        this.arn = arn\n        this.secret = secretString\n        this.createdDate = createdDate\n        this.lastAccessedDate = lastAccessedDate\n        this.lastChangedDate = lastChangedDate\n        this.tags = tags\n    }\n\n    /**\n     * Parses and constructs a Secret Manager's Secret from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {Secret}\n     */\n    static fromJSON(json: JSONObject) {\n        return new Secret(\n            json.Name as string,\n            json.ARN as string,\n            json.SecretString as string,\n            json.CreatedDate as number,\n            json.LastAccessedDate as number,\n            json.LastChangedDate as number,\n            json.Tags as Array<{ [key: string]: string }>\n        )\n    }\n}\n\nexport class SecretsManagerServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a SecretsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'SecretsManagerServiceError'\n        this.operation = operation\n    }\n}\n"],"names":["v1","v4","uuid","module","exports","byteToHex","i","toString","substr","buf","offset","bth","join","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","rnds","Array","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AWSError","message","code","name","xmlDocument","doc","parseHTML","find","text","signHeaders","headers","requestTimestamp","method","path","queryString","body","awsConfig","service","URIencodingConfig","sessionToken","derivedSigningKey","secretAccessKey","time","region","kSecret","date","toDate","kDate","hmac","kRegion","kService","deriveSigningKey","canonicalRequest","uri","query","payload","httpRequestMethod","toUpperCase","canonicalURI","length","URIEncode","createCanonicalURI","canonicalQueryString","qs","split","filter","e","map","v","parts","decodeURIComponent","sort","localeCompare","parseQueryString","uriComponent","encodeURIComponent","createCanonicalQueryString","canonicalHeaders","constructor","entries","values","toLowerCase","trim","isArray","replace","createCanonicalHeaders","signedHeaders","createSignedHeaders","requestPayload","UnsignedPayload","createCanonicalPayload","createCanonicalRequest","stringToSign","hashedCanonicalRequest","requestDateTime","toTime","credentialScope","createCredentialScope","HashingAlgorithm","createStringToSign","sha256","signature","calculateSignature","authorizationHeader","accessKeyID","InvalidSignatureError","TypeError","keys","letter","c","isNumeric","includes","charCodeAt","URIEncodingConfig","double","this","timestamp","toISOString","substring","AWSConfig","InvalidAWSConfigError","accessKeyId","scheme","endpoint","AWSClient","serviceName","host","now","url","SecretsManagerClient","commonHeaders","JSON","stringify","signedRequest","res","http","_handle_error","json","s","Secret","fromJSON","id","SecretId","secret","description","versionID","tags","uuidv4","Name","Description","SecretString","ClientRequestToken","Tags","recoveryWindow","noRecovery","operation","response","errorCode","error_code","error","errorMessage","Message","__type","SecretsManagerServiceError","arn","secretString","createdDate","lastAccessedDate","lastChangedDate","ARN","CreatedDate","LastAccessedDate","LastChangedDate"],"sourceRoot":""}